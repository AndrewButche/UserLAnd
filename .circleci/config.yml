version: 2

reference:
  # Cache
  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  # Workspaces
  workspace: &workspace
    ~/workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/intermediates
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/outputs/code-coverage
        - app/build/test-results
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  attach_release_workspace: &attach_release_workspace
    attach_workspace:
      at: *workspace
  persist_release_workspace: &persist_release_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build
        - app/versionCode.txt
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  # Basic docker config
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-ndk
    environment:
      TERM: dumb
      # Limit JVM heap size to prevent exceeding container memory
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

  # Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby dependencies
      command: bundle check || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android dependencies
      command: ./gradlew androidDependencies

  # Secrets
  export_android_key: &export_android_key
    run:
      name: Export Android key store environment variable
      command: echo 'export ANDROID_KEYSTORE="$ANDROID_KEYSTORE"' >> $BASH_ENV
  decode_android_key: &decode_android_key
    run:
      name: Decode Android key store
      command: echo $ANDROID_KEYSTORE | base64 -di > keystore.jks

  export_github_release_token: &export_github_release_token
    run:
      name: Export Github release key
      command: echo 'export GITHUB_RELEASE_TOKEN="$GITHUB_RELEASE_TOKEN"' >> $BASH_ENV

  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_ACCOUNT_KEY="$GCLOUD_SERVICE_ACCOUNT_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_ACCOUNT_KEY | base64 -di > ${HOME}/client-secret.json

  export_play_key: &export_play_key
    run:
      name: Export Play store key
      command: echo 'export PLAY_KEY="$PLAY_KEY"' >> $BASH_ENV
  decode_play_key: &decode_play_key
    run:
      name: Decode Play store key
      command: echo $PLAY_KEY | base64 -di > ${HOME}/play-key.json

  export_tracepot_endpoint: &export_tracepot_endpoint
    run:
      name: Export tracepot https environment variable
      command: echo "tracepotHttpsEndpoint=$TRACEPOT_ENDPOINT" >> app/tracepot.properties

  early_return_for_forked_pull_requests: &early_return_for_forked_pull_requests
    run:
      name: Return early to avoid jobs that forked PRs will fail without secrets.
      command: |
        if [ -n "$CIRCLE_PR_NUMBER" ]; then
          echo "Nothing to do for forked PRs. Skipping this step."
          circleci step halt
        fi

jobs:
  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - *android_dependencies
      - *save_cache
      - run:
          name: Run ktlint
          command: ./gradlew ktlint
      - run:
          name: Gradle build (debug)
          command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

  build_release:
    <<: *android_config
    steps:
      - *early_return_for_forked_pull_requests
      - checkout
      - *restore_cache
      - *android_dependencies
      - *save_cache
      - *export_android_key
      - *decode_android_key
      - *export_tracepot_endpoint
      - run:
          name: Run ktlint
          command: ./gradlew ktlint
      - run:
          name: Build
          command: ./gradlew -PciBuild=true :app:assembleRelease
      - *persist_release_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - *android_dependencies
      - *save_cache
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true :app:testDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  test_instrumented:
    <<: *android_config
    steps:
      - *early_return_for_forked_pull_requests
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project userland-app
      - run:
          name: Authenticate with Google Cloud
          command: gcloud auth activate-service-account --key-file ${HOME}/client-secret.json
      - run:
          name: Run instrumented test on Firebase Test Lab
          command: gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/debug/app-debug.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk --device model=Pixel2,version=28,locale=en_US,orientation=portrait --environment-variables coverage=true,coverageFile=/sdcard/coverage.ec --directories-to-pull=/sdcard --timeout 20m
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-5114im9qa55t6-h6m476ja1a8jm | tail -1`*" ${HOME}/workspace/firebase/
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  report_coverage:
    <<: *android_config
    steps:
      - *early_return_for_forked_pull_requests
      - checkout
      - *restore_cache
      - *android_dependencies
      - *save_cache
      - *attach_debug_workspace
      - *attach_firebase_workspace
      - run:
          name: Move Firebase coverage report
          command: mkdir -p app/build/outputs/code-coverage/connected && cp firebase/*/artifacts/coverage.ec app/build/outputs/code-coverage/connected/coverage.ec
      - *export_gcloud_key
      - *decode_gcloud_key
      - run:
          name: Generate JaCoCo report
          command: ./gradlew -PciBuild=true :app:jacocoCoverageReportForCi
      - run:
          name: Upload coverage to Codecov
          command: bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

  deploy:
    <<: *android_config
    steps:
      - *early_return_for_forked_pull_requests
      - checkout
      - *restore_cache
      - *ruby_dependencies
      - *attach_release_workspace
      - *export_play_key
      - *decode_play_key
      - *export_github_release_token
      - run:
          name: Deploy to Play store
          command: bundle exec fastlane deploy

workflows:
  version: 2
  workflow:
    jobs:
      - build_debug
      - build_release:
          filters:
            branches:
              only:
                - releases
      - test_unit:
          requires:
            - build_debug
      - test_instrumented:
          requires:
            - build_debug
      - report_coverage:
          requires:
            - test_unit
            - test_instrumented
      - deploy:
          filters:
            branches:
              only:
                - releases
          requires:
            - test_unit
            - test_instrumented
            - build_release